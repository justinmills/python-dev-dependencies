name: Creates a new release
# Run manually
on:
  workflow_dispatch:
    inputs:
      version:     
        description: 'Semver type of new version (major / minor / patch)'
        required: true
        type: choice
        options: 
        - patch
        - minor
        - major

jobs:
  bump-version:
    runs-on: ubuntu-latest

    # Only run this in the Release Environment (which will restrict it to the main branch)
    environment: Release

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Check out using the secret PAT an admin set up so we can bypass
          # branch protection rules. NOTE also that we're running in the Release
          # environment which on the repo is restricted to only the main branch.
          token: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      - name: Install poetry
        run: pipx install poetry==1.4.2

      - name: Set up python
        uses: actions/setup-python@v4
        with:
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install

      # This is required by the poetry version command
      - name: Setup Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@teamname.com"

      - name: Bump version to release
        run: |
          OLD_VERSION=`poetry version --short`
          poetry version ${{ github.event.inputs.version }}
          NEW_VERSION=`poetry version --short`
          MESSAGE="Bump up ${{ github.event.inputs.version }} version from ${OLD_VERSION} to ${NEW_VERSION}"
          git add pyproject.toml
          git commit -m "$MESSAGE"
          git tag -a "v${NEW_VERSION}" -m "$MESSAGE"

      - name: Linting
        run: poetry run ruff check .

      - name: Formatting
        run: poetry run black --check .
      - name: Type checking
        run: poetry run mypy dev_dependencies tests

      - name: Tests
        run: |
          poetry run pytest --verbose --emoji --md report.md
          cat report.md >> $GITHUB_STEP_SUMMARY
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results
          path: |
            junit/test-results.xml
            htmlcov/*
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
            
      - name: Build package
        run: poetry build

      - name: Publish
        run: poetry publish

      - name: Bump version to next pre-release
        run: |
          # Now that we've tagged the release we want to cut, bump the version again to prep for the next version
          poetry version prerelease
          git add pyproject.toml
          NEXT_VERSION=`poetry version --short`
          git commit -m "Bumped version to next pre-release version: ${NEXT_VERSION}"

      - name: Push local changes to origin
        run: git push --follow-tags

      # This was the old way to use some python code to get the current version
      # and then bump it by one patch and git tag that one.
      # - name: Create new patch release
      #   run: .github/scripts/release.py
      #   env:
      #     # Do not use GITHUB_TOKEN here, which is available...reason being that
      #     # any action taken using this token will never trigger another
      #     # workflow, and that is exactly what we want!
      #     GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
